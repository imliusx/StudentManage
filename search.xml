<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java学习笔记-第2天]]></title>
    <url>%2F2019%2F07%2F14%2FJava%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC2%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[常量的概述和使用 什么是常量 在程序执行的过程中其值不可以发生改变 Java中常量的分类 字面值常量 字符串常量用双引号&quot; &quot;括起来的内容如&quot;Hello&quot; 小数所有小数 12.34 33.1 字符常量用单引号&#39;括起来的内容&#39;a&#39; &#39;A&#39; &#39;0&#39;注意:&#39;10&#39; &#39; &#39;不是字符常量 布尔常量较为特有只有true和false 空常量null 自定义常量 进制进制概述 什么是进制 进制：就是进位制，是人们规定的一种进位方法。 对于任何一种进制X进制，就表示某一位置上的数运算时是逢X进一位。二进制就是逢二进一，八进制是逢八进一，十进制是逢十进一，十六进制是逢十六进一。 例如一周有七天,七进制,一年有十二个月,十二进制 二进制的由来 其实二进制来源与中国,请看史料记载 18世纪德国数理哲学大师莱布尼兹从他的传教士朋友鲍威特寄给他的拉丁文译本《易经》中，读到了八卦的组成结构，惊奇地发现其基本素数0 1 ，即《易经》的阴爻和阳爻，其进位制就是二进制，并认为这是世界上数学进制中最先进的。20世纪被称作第三次科技革命的重要标志之一的计算机的发明与应用，其运算模式正是二进制。它不但证明了莱布尼兹的原理是正确的，同时也证明了《易经》数理学是很了不起的。 八进制的由来 任何数据在计算机中都是以二进制的形式存在的。二进制早期由电信号开关演变而来。一个整数在内存中一样也是二进制的，但是使用一大串的1 或者0 组成的数值进行使用很麻烦。 所以就想把一大串缩短点，将二进制中的三位用一位表示。这三位可以取到的最大值就是7. 超过7就进位了，这就是八进制。 十六进制的由来 但是对于过长的二进制变成八进制还是较长，所以出现的用4个二进制位表示一位的情况，四个二进制位最大是15，这就是十六进制。 不同进制表现同一个数据的形式特点 进制越大，表现形式越短 不同进制数据的表现形式 二进制 由0 1 组成 以0b 开头(b 可以大写也可以小写) JDK1.7版本可以表示二进制了 如0b100 八进制 由0 1 2 3 4 5 6 7 组成 以0 开头 如0100 十进制 由0 …9 组成. 整数默认是十进制的 如100 十六进制 由0 ..9 a ..f 组成 以0x 开头 如0x100 演示123456789101112 class Demo &#123; public static void main(String[] args) &#123; //二进制(JDK1.7支持) 输出:4 System.out.println(0b100); //八进制 输出:64 System.out.println(0100); //十进制 输出:100 System.out.println(100); //十六进制 输出: 256 System.out.println(0x100); &#125;&#125; 任意进制到十进制的转换 任意进制到十进制的转换原理 系数：就是每一位上的数据 基数：X进制，基数就是X 权：在右边，从0开始编号，对应位上的编号即为该位的权 结果：把系数 * 基数 的权次幂 相加 即可1公式: 系数 * 基数^权次幂 练习 二进制转十进制 10b100 = 0 * 2^0 + 0 * 2^1 + 1 * 2^2 = 4 八进制转十进制 1074 = 4 * 8^0 + 7 * 8^1 = 60 十六进制转十进制 10x3c = c * 16^0 + 3 * 16^1 = 60 十进制到任意进制的转换 十进制到任意进制的转换原理 除积倒取余 练习 十进制转二进制 123456789//十进制60转二进制计算过程如下: 除以2倒取余数 2 |60 2 |30 ....0 2 |15 ....0 2 | 7 ....1 2 | 3 ....1 2 | 1 ....1 2 | 0 ....1 //故十进制60的二进制为: 111100 十进制转八进制 十进制转十六进制 快速的进制转换法 8421码及特点 8421码是中国大陆的叫法，8421码是BCD代码中最常用的一种。在这种编码方式中每一位二值代码的1都是代表一个固定数值，把每一位的1代表的十进制数加起来，得到的结果就是它所代表的十进制数码 12345678 1 1 1 1 1 1 1 11*2^7 1*2^6 1*2^5 1*2^4 1*2^3 1*2^2 1*2^1 1*2^0 128 64 32 16 8 4 2 160转二进制 60 = 0011110080转二进制 = 01010000 通过8421码的方式进行十进制到二进制的转换 1260转二进制 60 = 0011110080转二进制 = 01010000 通过8421码的方式进行二进制和十进制的相互转换 120b101 = 1 + 4 = 50b1010101 = 1 + 4 + 16 + 64 = 85 二进制到八进制的简易方式 10b111 100 = 074 二进制到十六进制的简易方式 10b11 1100 = 0x3c 原码反码补码原码反码补码 有符号数据表示法的几种方式 原码 就是二进制定点表示法，即最高位为符号位,0 表示正,1 表示负，其余位表示数值的大小 通过一个字节,也就是8个二进制位表示+7和-7 0 (符号位) 0 0 0 0 1 1 1 1 (符号位) 0 0 0 0 1 1 1 反码 正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外。 补码 正数的补码与其原码相同；负数的补码是在其反码加1。 计算机存储时以原码 进行存储, 计算时以补码 进行计算 变量变量的概述及格式 什么是变量 在程序执行的过程中，在某个范围内其值可以发生改变的量 变量的定义格式 数据类型 变量名 = 变量值1int age = 20; 为什么要定义变量 用来不断的存放同一类型的常量, 并可以重复使用 数据类型数据类型的概述和分类 为甚么要有数据类型 Java是强类型语言, 对于每一种数据都定义了明确的具体数据类型, 在内存中分配了不同大小的内存空间 整数默认类型是int 类型, 浮点数默认类型是double 类型 数据类型的分类 基本数据类型4类8种 整数型 1234byte //1个字节 short //2个字节int //4个字节long //8个字节 浮点型 12float //4个字节 double //8个字节 字符型 1char //2个字节 布尔型 1boolean //1个字节(没有明确) 引用数据类型 类(class) 接口(interface) 数组([]) 使用变量的注意事项 案例演示 作用域问题 同一个区域不能使用相同的变量名 初始化值问题 局部变量在使用之前必须赋值 一条语句可以定义几个变量1int a, b, c; 类型转换数据类型转换之隐式转换 案例演示 int +int byte + int 的结果分别用byte和int类型接收，看效果 Java中的默认转换规则 byte ,short ,char – int – long – float – double 数据类型转换之强制转换 强制转换问题 int a = 10; byte b = 20; b = a + b; 强制转换的格式 b = (byte)(a + b); 强制转换的注意事项 如果超出了被赋值的数据类型的取值范围得到的结果会与你期望的结果不同 面试题之变量相加和常量相加的区别 案例演示 面试题:看下面的程序是否有问题，如果有问题，请指出并说明理由。 byte b1 = 3; byte b2 = 4; byte b3 = b1 + b2 (会编译报错); 从两方面去回答这个题 b1和b2是两个变量,变量里面存储的值都是变化的,所以在程序运行中JVM是无法判断里面具体的值 byte类型的变量在进行运算的时候,会自动类型提升为int类型 byte b4 = 3 + 4 (编译不会报错); 3和4都是常量,java有常量优化机制,就是在编译的的时候直接把3和4的结果赋值给b4了 long与float的取值范围谁大谁小 进行混合运算的时候,byte,short ,char 不会相互转换,都会自动类型提升为int 类型 ,其他类型进行混合运算的是小的数据类型提升为大的 byte ,short ,char – int – long – float – double long : 8个字节 float：4个字节 float 4个字节是32个二进制位,IEEE754标准规定: 1位是符号位,8位是指数位,23位是尾数位. 8位指数位则取值范围为00000000 到11111111 则为0 到255 , 规定0 和255 保留, 255 代表无穷大, 则取值范围为1 到254 , 规定减去-127 , 则最终的取值范围为-126 到127 之间 它们底层的存储结构不同。 float 表示的数据范围比long 的范围要大 long：2^63-1 float：3.4*10^38 &gt; 2*10^38 &gt; 2*8^38 = 2*2^3^38 = 2*2^114 &gt; 2^63-1 字符和字符串参与运算 案例演示 System.out.println(&#39;a&#39;); 输出: a System.out.println(&#39;a&#39;+1);输出 : 98 , 自动类型提升为int System.out.println((char)(&#39;a&#39;+1));输出 : b , 强制类型转换为char System.out.println((char)98); 输出: b ASCII码表的概述 记住三个值： ‘0’ 48 ‘A’ 65 ‘a’ 97 案例演示 System.out.println(&quot;hello&quot;+&#39;a&#39;+1);输出:helloa1 , 任何数据跟字符串连接都产生新的字符串 System.out.println(&#39;a&#39;+1+&quot;hello&quot;);输出:98hello + 在有字符串参与中被称为字符串连接符 System.out.println(&quot;5+5=&quot;+5+5);输出: 5+5=55 System.out.println(5+5+&quot;=5+5&quot;);输出: 10=5+5 char数据类型 char c = 97; Java语言中的字符char可以存储一个中文汉字吗?为什么呢? 可以。因为Java语言采用的是Unicode编码 。Unicode编码中的每个字符占用两个字节。 所以，Java中的字符可以存储一个中文汉字 运算符 什么是运算符 对常量和变量进行操作的符号成为运算符 运算符的分类 算术运算符 赋值运算符 比较运算符 逻辑运算符 位运算符 三目运算符 表达式 用运算符把常量或者变量连接起来的符合java语法的式子就可以成为表达式 算术运算符+ 加法运算符1234int a = 5;int b = 3;//sum的值为8System.out.println(sum); 除此之外, + 号还可以作为字符串连接运算符 -减法运算符12345int a = 5;int b = 3;int sub = a - b;//sub的值为2System.out.println(sub); *乘法运算符12345int a = 5;int b = 3;int multiply = a * b;//multiply的值为15System.out.println(multiply); /除法运算符 除法运算符有些特殊, 如果除法运算符的两个操作数都是整数类型, 则计算结果也是整数, 也就是将自然除法的结果截断取整, 例如19/4的结果是4而不是5 . 如果除法运算符的两个操作数都是整数类型, 则除数不可以是0 , 否则将引发零异常 但如果除法运算符的两个操作数有一个是浮点数, 或者两个都是浮点数, 则计算结果就是自然除法的结果. 而且此时允许除数是0 , 或者0.0 , 得到的结果是正无穷或者负的无穷大 1234567891011121314151617public class DivTest &#123; public static void main(String[] args) &#123; double a = 5.2; double b = 3.1; double div = a / b; //div的值将是 1.6774193548387097 System.out.println(div); //输出无穷大 Infinity System.out.println("5除以0.0的结果是: " + 5 / 0.0); //输出负的无穷大 -Infinity System.out.println("-5除以0.0的结果是: " + -5.0 / 0); //下面的代码将出现异常 java.lang.ArithmeticException: / by zero System.out.println("-5除以0的结果是: " + -5 / 0); &#125;&#125; 注意事项： 整数相除只能得到整数。如果想得到小数，必须把数据变化为浮点数类型 / 获取的是除法操作的商 % 求余运算符 求余运算的结果不一定总是整数, 他的计算结果是使用第一个操作数除以第二个操作数, 得到一个整除的结果后剩下的就是余数. 由于求余运算需要进行除法运算, 因此如果求余运算的两个操作数都是整数类型, 则求余运算的第二个操作数不能是0 , 否则将引发除以0异常 . 如果求余运算中的两个操作数中有一个或者两个都是浮点数, 则允许第二个操作数是0 或者0.0 只是求余运算的结果是非数: NaN 1234567891011121314151617181920public class ModTest &#123; public static void main(String[] args) &#123; double a = 5.2; double b = 3.1; double mod = a % b; //mod的值为: 2.1 System.out.println(mod); //输出非数 NaN System.out.println("5对0.0求余的结果是:" + 5 % 0.0); //输出非数 NaN System.out.println("-5对0.0求余的结果是: " + -5 % 0.0); //输出结果是 0.0 System.out.println("0对5.0求余的结果是: " + 0 % 5.0); //输出结果是 NaN System.out.println("0对0.0求余的结果是: " + 0 % 0.0); //下面代码将出现异常 java.lang.ArithmeticException: / by zero System.out.println("-5对0求余的结果是: " + -5 % 0); &#125;&#125; 注意事项 % 获取的是除法操作的余数 算术运算符++ 和-- 的用法 ++ ,-- 运算符的作用 自加++ 自减-- 运算 ++ :自加。对原有的数据进行+1 -- :自减。对原有的数据进行-1 注意事项 自加和自减只能用于操作变量 , 不能用于操作直接量, 常量, 或者表达式例如 5++ ,6-- 等写法都是错误的 案例演示 单独使用： 放在操作数的前面和后面效果一样。(这种用法是我们比较常见的) 参与运算使用： 放在操作数的前面，先自增或者自减，然后再参与运算。 放在操作数的后面，先参与运算，再自增或者自减。 算术运算符++和--的练习 案例演示 请分别计算出a,b,c的值?int a = 10;int b = 10;int c = 10; 1234a = b++; //a = 10 b = 11c = --a; //c = 9 a = 9b = ++a; //b = 10 a = 10a = c--; //a = 9 c = 8 案例演示 请分别计算出x,y的值?12int x = 4;int y = (x++)+(++x)+(x*10); 赋值运算符的基本用法 赋值运算符有哪些 案例演示 赋值运算符的基本用法 注意事项： 基本的赋值运算符：= 把=右边的数据赋值给左边。 扩展的赋值运算符：+= ,-= ,*= ,/= ,%= += 把左边和右边做加法，然后赋值给左边。 赋值运算符的面试题 案例演示 面试题:看下面的程序是否有问题，如果有问题，请指出并说明理由。 short s = 1; s = s + 1; short s = 1; s += 1; 关系运算符的基本用法及其注意事项 关系运算符有哪些 案例演示 关系运算符的基本用法 注意事项： 无论你的操作是简单还是复杂，结果是boolean 类型。 ==不能写成=]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 语言学习]]></title>
    <url>%2F2019%2F07%2F13%2FMarkdown%20%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Markdown 语言学习 MarkdownMarkdown 语言是一种轻量级标记语言, 它允许人们使用易读易写的纯文本格式编写文档.Markdown 语言在2004年由约翰·格鲁伯（John Gruber）创建.Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档.Markdown 编写后的文档后缀为 .md, .markdown. Markdown支持的语言Markdown 可以支持下列语言:1c, abnf, accesslog, actionscript, ada, apache, applescript, arduino, armasm, asciidoc, aspectj, autohotkey, autoit, avrasm, awk, axapta, bash, basic, bnf, brainfuck, cal, capnproto, ceylon, clean, clojure, clojure-repl, cmake, coffeescript, coq, cos, cpp, crmsh, crystal, cs, csp, css, d, dart, delphi, diff, django, dns, dockerfile, dos, dsconfig, dts, dust, ebnf, elixir, elm, erb, erlang, erlang-repl, excel, fix, flix, fortran, fsharp, gams, gauss, gcode, gherkin, glsl, go, golo, gradle, groovy, haml, handlebars, haskell, haxe, hsp, htmlbars, http, hy, inform7, ini, irpf90, java, javascript, json, julia, kotlin, lasso, ldif, leaf, less, lisp, livecodeserver, livescript, llvm, lsl, lua, makefile, markdown, mathematica, matlab, maxima, mel, mercury, mipsasm, mizar, mojolicious, monkey, moonscript, n1ql, nginx, nimrod, nix, nsis, objectivec, ocaml, openscad, oxygene, parser3, perl, pf, php, pony, powershell, processing, profile, prolog, protobuf, puppet, purebasic, python, q, qml, r, rib, roboconf, rsl, ruby, ruleslanguage, rust, scala, scheme, scilab, scss, smali, smalltalk, sml, sqf, sql, stan, stata, step21, stylus, subunit, swift, taggerscript, tap, tcl, tex, thrift, tp, twig, typescript, vala, vbnet, vbscript, vbscript-html, verilog, vhdl, vim, x86asm, xl, xml, xquery, yaml, zephir Markdown 应用Markdown 能被用来撰写电子书, 如: Gitbook.当前许多网站都广泛使用Markdown来撰写帮助文档或者是论坛上发表消息. 例如: Github, 简书, reddit, Diaspora, Stack Exchange, OpenStreeMap, SourceForge等. 编辑器该学习笔记使用Typora编辑器来学习Markdown的语法, Typora支持 MacOS, Windows, Linux,平台, 包含多种主题, 编辑后直接渲染出效果.支持导出HTML, PDF, Word, 图片等多种类型的文件.Typora 官网: https://typora.io/ Markdown标题Markdown标题有两种格式 使用=和-标记一和二级标题 1234我展现的是一级标题===============我展现的是二级标题--------------- 使用#号标记使用#号可以标记1-6级标题, 一级标题对应一个#号, 二级标题对应两个#号, 以此类推 123456#一级标题##二级标题###三级标题####四级标题#####五级标题######六级标题 Markdown段落格式 Markdown 段落没有特殊的格式, 直接编写文字就好, 段落的换行是使用两个以上的空格加回车 当然也可以在段落后面使用一个空行来表示重新开始一个段落字体Markdown 可以使用以下几种字体123456*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___ 效果图如下:斜体文本斜体文本粗体文本粗体文本粗斜体文本粗斜体文本 分隔线可以在一行中使用三个以上的*号, -号, 来建立一个分隔线, 行内不能有其他东西, 也可以在*号或者是-中间插入空格. 下面每种写法都可以建立分隔线12345**** * ******- - --------- 效果图如下: 删除线如果段落上的文字要添加删除线, 只需要在文字的两端 加上两个波浪线~~即可12Markdown 语法学习~~Markdown 语法学习~~ 效果图如下:Markdown 语法学习Markdown 语法学习 下划线下划线可以通过HTML的&lt;u&gt;标签来实现:1&lt;u&gt;Markdown 语法学习&lt;/u&gt; 效果图如下:Markdown 语法学习 脚注脚注是对文本的补充说明, Markdown 脚注的用法如下:12[^要注明的文本][^1]: 编程使我快乐! 效果图如下:这是一个脚注 ^1 Markdown列表Markdown 支持有序列表和无序列表 无序列表无序列表使用星号*和加号+或是-作为列表标记, 注意: 每一个*,-,+后面应该有一个空格1234567891011* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项 显示结果如下: 第一项 第二项 第三项 第一项 第二项 第三项 第一项 第二项 第三项 有序列表有序列表使用数字并加上.号来表示,1231. 第一项2. 第二项3. 第三项 显示结果如下: 第一项 第二项 第三项 列表嵌套列表嵌套只需要在子列表中的选项添加4个空格即可:1234561. 第一项: - 第一项嵌套的第一个元素 - 第一项嵌套的第二个元素2. 第二项: - 第二项嵌套的第一个元素 - 第二项嵌套的第二个元素 显示结果如下: 第一项: 第一项嵌套的第一个元素 第一项嵌套的第二个元素 第二项: 第二项嵌套的第一个元素 第二项嵌套的第二个元素 Markdown区块引用Markdown 区块引用是在段落开头使用&gt;符号, 后面紧跟一个空格符号123&gt; 区块引用&gt; Markdown 语法学习 &gt; Talk is cheap. Show me the code. 显示结果如下 区块引用Markdown 语法学习Talk is cheap. Show me the code. 另外区块是可以嵌套的, 一个&gt;符号是最外层, 两个&gt;符号是第一层嵌套, 以此类推:123&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套 显示结果如下: 最外层 第一层嵌套 第二层嵌套 区块中使用列表区块中使用列表的实例如下:123456&gt; 区块中使用列表&gt; 1. 第一项&gt; 2. 第二项&gt; + 第一项&gt; - 第二项&gt; * 第三项 显示结果如下: 区块中使用列表 第一项 第二项 第一项 第二项 第三项 列表中使用区块如果想要在列表中放入区块引用, 那么就在&gt;前面添加4个空格的缩进列表中使用区块的实例如下:1234* 列表第一项 &gt; 区块第一项 &gt; 区块第二项* 列表第二项 显示结果如下: 列表第一项 区块第一项区块第二项 列表第二项 Markdown代码如果是段落上的一个函数或者片段的代码可以使用1个反引号`把它包起来,例如: 1`printf()`函数 显示结果如下:printf()函数 代码区块 代码区块可以使用4个空格或者1个制表符(Tab键) 也可以使用3个反引号```包裹一段代码, 并指定一种语言 (也可以不指定) 显示结果如下: 12345public class Demo &#123; public static void main(String[] args) &#123; System.out.println("Hello"); &#125;&#125; Markdown链接链接使用的方法如下: 123[链接名称](链接地址)或者&lt;链接地址&gt; 链接使用实例: 1[这是一个链接](https://www.baidu.com) 显示结果如下: 这是一个链接 直接使用链接地址: 1&lt;https://www.baidu.com&gt; 显示结果如下: https://www.baidu.com 高级链接123456这个链接使用a来作为网址的变量 [百度][a]这个链接使用web来作为网址的变量[百度][web]然后在文档的结尾为变量赋值(网址)[a]: https://www.baidu.com/[web]: https://www.baidu.com/ 显示结果如下: 这个链接使用a来作为网址的变量 [百度][a]这个链接使用web来作为网址的变量[百度][web] 然后在文档的结尾为变量赋值(网址)[a]: https://www.baidu.com/[web]: https://www.baidu.com/ Markdown图片Markdown图片语法格式如下: 12![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;) 开头一个感叹号! , 比链接多了一个感叹号 接着一个方括号, 里面放上图片的代替文字 接着一个普通的符号, 里面放上图片的网址, 最后还可以用引号&quot;包住并加上选择性的&quot;title&quot;属性文字 使用实例: 1![这是一张图片](https://s2.ax1x.com/2019/07/13/ZhMDGd.png) 显示结果如下: 当然, 也可以像网址那样对图片网址使用变量 1234这个链接用b作为网址的变量![photo][b]然后在文档的结尾处进行变量赋值(网址)[b]:https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g4yjzptwf4j303k03ka9t.jpg 显示结果如下 这个链接用b作为网址的变量![photo][b][b]: https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g4yjzptwf4j303k03ka9t.jpg Markdown表格Markdown 制作表格使用|来分隔不同的单元格, 使用-来分隔表头和其他行 语法格式如下: 1234| 表头 | 表头 || ----- | ----- || 单元格 | 单元格 || 单元格 | 单元格 | 显示结果如下: 表头 表头 单元格 单元格 单元格 单元格 对齐方式 -:设置内容和标题栏居右对齐 :-设置内容和标题栏居左对齐 :-:设置内容和标题栏居中对齐 实例如下: 1234|左对齐|右对齐|居中对齐||:----|----:|:------:||单元格|单元格|单元格||单元格|单元格|单元格| 显示结果如下: 左对齐 右对齐 居中对齐 单元格 单元格 单元格 单元格 单元格 单元格 Markdown高级技巧支持的HTML元素目前支持的HTML元素有: &lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;等, 如: 1使用&lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑 转义Markdown使用了很多特殊符号来表示特定的意义, 如果需要显示特定的符号则需要使用转义字符, Markdown使用反斜杠\转义特殊字符 12文本加粗**显示正常星号** 输出结果为 文本加粗**显示正常星号** Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： 123456789101112\ 反斜线` 反引号* 星号_ 下划线&#123;&#125; 花括号[] 方括号() 小括号# 井字号+ 加号- 减号. 英文句点! 感叹号]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java学习笔记-第1天]]></title>
    <url>%2F2019%2F05%2F15%2FJava%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC1%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[Java语言发展史SUN(Stanford University Network，斯坦福大学网络公司) 1990年末，Sun公司启动由James Gosling领导的“Green计划”，旨在开发智能家电的嵌入式控制系统 1991年2月，Green项目小组成员发现C++存在很多弊端，决定在其基础上开发一种新的语言，并命名为“Oak” 1991年6月，JamesGosling开发了Oak的解释器 1992年，Green完成了Green操作系统、Oak语言、类库等开发 1992年11月，Green计划转化成“FirstPerson”，一个Sun公司的全资子公司 1993年，时代华纳发布电视机顶盒提议书，有线电视业界觉得FirstPerson的平台给予用户过多的控制权，因此FirstPerson的投标败给了SGI。同年，FirstPerson公司一笔与3DO公司的机顶盒交易也宣告失败，Green计划几乎夭折 1994年，FirstPerson公司倒闭，员工都合并到Sun公司。Gosling修改OaK并很快发布第一个Java语言的网页浏览器：WebRunner(后来改名为HotJava)，Oak更名为Java 1995年5月23日，Sun公司正式在互联网上免费发布Java语言，标志着JAVA语言的正式诞生。几个月后，超过10万人下载Java语言 1996年，JDK1.0发布，这是java发展历程中的重要里程碑，标志着java成为一种独立的开发工具 1997年2月，JDK1.1发布 1998年12月，第二代Java平台的企业版J2EE发布 1999年4月27日，HotSpot虚拟机发布 1999年6月，Java2被分成三个版本：J2SE（标准版）、J2EE(企业版)、J2ME(微型版),是Java发展过程中最重要的一个里程碑，标志着Java的应用开始普及 2000年5月,JDK1.3,JDK1.4和J2SE1.3相继发布 2001年9月24日，J2EE1.3发布 2002年2月，J2SE1.4发布,各种开源框架大量出现 2004年9月30日18:00PM，J2SE1.5发布，成为java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.0 2005年6月，Java SE 6.0发布，三个版本分别改为：JavaSE， JavaEE， JavaME 2006年11月13日，Java技术的发明者Sun公司宣布，将Java技术作为免费软件对外发布 2009年4月20日，Oracle以74亿美元收购Sun公司，取得了java的版权 2011年7月，JavaSE7发布 2014年3月，JavaSE8发布 Java语言版本 JDK 1.1.4 Sparkler 宝石 1997-09-12 JDK 1.1.5 Pumpkin 南瓜 1997-12-13 JDK 1.1.6 Abigail 阿比盖尔–女子名 1998-04-24 JDK 1.1.7 Brutus 布鲁图–古罗马政治家和将军 1998-09-28 JDK 1.1.8 Chelsea 切尔西–城市名 1999-04-08 J2SE 1.2 Playground 运动场 1998-12-04 J2SE 1.2.1 none 无 1999-03-30 J2SE 1.2.2 Cricket 蟋蟀 1999-07-08 J2SE 1.3 Kestrel 美洲红隼 2000-05-08 J2SE 1.3.1 Ladybird 瓢虫 2001-05-17 J2SE 1.4.0 Merlin 灰背隼 2002-02-13 J2SE 1.4.1 grasshopper 蚱蜢 2002-09-16 J2SE 1.4.2 Mantis 螳螂 2003-06-26 JAVASE 5.0 (1.5.0) Tiger 老虎 JAVASE 5.1 (1.5.1) Dragonfly 蜻蜓 JAVASE 6.0 (1.6.0) Mustang 野马 JAVASE 7.0 (1.7.0) Dolphin 海豚 Java语言平台 J2SE(Java 2 Platform Standard Edition)标准版 是为开发普通桌面和商务应用程序提供的解决方案,该技术体系是其他两者的基础，可以完成一些桌面应用程序的开发 J2ME(Java 2 Platform Micro Edition)小型版 是为开发电子消费产品和嵌入式设备提供的解决方案 J2EE(Java 2 Platform Enterprise Edition)企业版 是为开发企业环境下的应用程序提供的一套解决方案,该技术体系中包含的技术如 Servlet、Jsp等，主要针对于Web应用程序开发 Java语言的特点 简单性 面向对象 分布式处理 多线程 动态 安全性 开源 跨平台 Java语言跨平台原理只要在需要运行java应用程序的操作系统上，先安装一个Java虚拟机(JVM Java Virtual Machine)即可。由JVM来负责Java程序在该系统中的运行. write once ,run anywhere!(一处编译,到处运行) JDK和JRE JRE 包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等，如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。 JRE:JVM+类库。 JDK JDK是提供给Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。 其中的开发工具：编译工具(javac.exe) 打包工具(jar.exe)等 JDK : JRE + JAVA开发工具。 Java语言约定俗称的的书写格式 大括号要对齐, 而且成对写 12345public class Demo &#123; public static void main(String[] args) &#123; System.out.println("Hello World!"); &#125;&#125; 左大括号前面要有空格 方法和程序块之间加空行让程序看起来更加清晰 并排语句之间加空格, 如for语句 运算符两侧加空格 123for(int i = 0; i &lt; 10; i++ ) &#123; System.out.println("Hello World!");&#125; path环境变量的配置 path 值为JDK安装路径/bin classpath 值为 .;JRE安装路径/lib path和classpath的区别 path配置的是可执行文件.exe, 配置后可以在不同的盘符下访问path路径下的可执行文件 classpath配置的java的类文件, 就是.class文件 配置classpath加上分号和不加分号的区别 如果不加分号只去classpath路径找 如果加上分号,先去classpath找,然后在当前路径找 注释编写程序时, 总需要为程序添加一些注释, 用以说明某段代码的作用, 或者说说明某个类的用途, 某个方法的功能, 以及该方法的参数和返回值的数据类型的意义. 为什么要添加注释 永远不要过于相信自己的理解力! 当你思路畅通, 进入编程境界时, 你可以很流畅的实现某个功能. 但这种流畅是因为你正处于开发的思路中, 为了再次阅读这段代码很流畅, 还可能找回当初编写这段代码的思路, 建议添加注释. 可读性第一!效率第二! 代码即文档! 注释的分类 单行注释 1// 单行注释 多行注释 1234/*多行注释多行注释*/ 文档注释 123/*** 文档注释*/ 关键字 什么是关键字 被Java赋予特定含义的的单词 关键字的特点 组成关键字的字母全部小写 常见的关键字 1public static void class ... 关键字注意事项 goto和const作为保留字存在, 目前并不使用 许多软件对关键字有特殊颜色的标记高亮 标识符 什么是标识符 就是给类,接口,方法等其名字时使用的字符序列 标识符的组成规则 英文大小写字母 数字字符 $和_ 标识符注意事项 不能使用关键字 不能以数字开头 标识符中常见的命名规则 见名知意 包 最好是域名倒过来写, 要求所有字母小写 1com.company.name 类或者接口 如果是一个单词, 则首字母大写如Person Demo Student 如果是多个单词,每个单词首字母大写(驼峰标识)如JavaTest 方法或者变量 如果是一个单词,则全部小写如age name 如果是多个单词, 从第二个单词首字母大写如studentName 常量 如果是一个单词,则全部字母大写如NUM 如果是多个单词,则所有单词大写,用下划线划分每个单词如MAX_NUM]]></content>
      <categories>
        <category>java基础</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
